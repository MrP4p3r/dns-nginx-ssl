#!/usr/bin/env python3
#  -*- coding: utf-8 -*-

import argparse
from contextlib import contextmanager


def initialize_domain_with_cert(app_domain_name, app_container_name):

    with write_nginx_vhost_config(app_domain_name, app_container_name):
        issue_and_install_cert(app_domain_name)


def issue_and_install_cert(app_domain_name):
    import os
    import sys
    from subprocess import Popen

    ensure_acme_challenge_dir_exists(app_domain_name)
    proc = Popen(['/root/.acme.sh/acme.sh', '--issue',
                  '-d', app_domain_name,
                  '-w', get_webroot(app_domain_name)])

    if proc.wait() != 0:
        print('Acme.sh could not issue a new cert. Exitting')
        sys.exit(1)

    sslcerts_dir = ensure_sslcerts_dir_exists(app_domain_name)
    proc = Popen(['/root/.acme.sh/acme.sh', '--install-cert',
                  '-d', app_domain_name,
                  '--cert-file', os.path.join(sslcerts_dir, 'cert.pem'),
                  '--key-file', os.path.join(sslcerts_dir, 'key.pem'),
                  '--reloadCmd', '/scripts/restart-nginx'])

    if proc.wait() != 0:
        print('Acme.sh could not install cert. Exitting')
        sys.exit(1)


@contextmanager
def write_nginx_vhost_config(app_domain_name, app_container_name):
    import os

    configs = render_vhost_configs(app_domain_name, app_container_name)
    config_path = '/etc/nginx/conf.d/%s.conf' % app_domain_name

    if os.path.exists(config_path):
        os.remove(config_path)

    with open(config_path, 'a') as f:
        f.write(next(configs))
    reload_nginx()

    yield

    with open(config_path, 'a') as f:
        f.write(next(configs))
    reload_nginx()


def render_vhost_configs(app_domain_name, app_container_name):
    import os
    import jinja2

    template_folder = os.path.join(os.path.dirname(__file__), 'manage.files/templates')
    env = jinja2.Environment(
        loader=jinja2.FileSystemLoader(template_folder),
        block_start_string='((*',
        block_end_string='*))',
        variable_start_string='(((',
        variable_end_string=')))',
        comment_start_string='((=',
        comment_end_string='=))'
    )

    yield env.get_template('nginx-conf-80.j2').render(
        app_domain_name=app_domain_name,
        app_container_name=app_container_name
    )

    yield env.get_template('nginx-conf-443.j2').render(
        app_domain_name=app_domain_name,
        app_container_name=app_container_name
    )


def ensure_sslcerts_dir_exists(app_domain_name):
    import os

    ssl_certs_dir = '/etc/sslcerts'
    ssl_certs_domain_dir = os.path.join(ssl_certs_dir, app_domain_name)
    if not os.path.exists(ssl_certs_domain_dir):
        os.mkdir(ssl_certs_domain_dir, mode=0o700)
    os.system('chown nginx:nginx %s' % ssl_certs_domain_dir)

    return ssl_certs_domain_dir


def ensure_acme_challenge_dir_exists(app_domain_name):
    import os

    acme_challenge_dir = os.path.join(get_webroot(app_domain_name), '.well-known/acme-challenge')
    if not os.path.exists(acme_challenge_dir):
        os.makedirs(acme_challenge_dir, exist_ok=True)

    return acme_challenge_dir


def get_webroot(app_domain_name):
    return '/var/www/%s' % app_domain_name


def reload_nginx():
    from subprocess import Popen
    while True:
        proc = Popen(get_reload_nginx_cmd())
        try:
            proc.wait(3)
            if proc.poll() is not None:
                break
        except Exception:
            continue


def get_reload_nginx_cmd(as_list=True):
    cmd = 'circusctl reload nginx'
    return cmd.split() if as_list else cmd


if __name__ == '__main__':
    import sys

    if len(sys.argv) <= 1:
        print('No args provided. Usage: \n\tmanage add-host -d DOMAIN_NAME -c CONTAINER_NAME')
        sys.exit(1)

    if sys.argv[1] == 'add-host':
        parser = argparse.ArgumentParser()
        parser.add_argument('-d', '--domain', required=True)
        parser.add_argument('-c', '--container', required=True)
        args = parser.parse_args(sys.argv[2:])

        initialize_domain_with_cert(args.domain, args.container)
